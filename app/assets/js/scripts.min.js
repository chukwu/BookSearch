/*!
 * bookshell
 * ..
 * 
 * @author Chukwu Ifeanyi
 * @version 1.0.5
 * Copyright 2017. MIT licensed.
 */
!function(e,t,i,a){"use strict";e(function(){function t(t,c){e(".loader").show(),e.getJSON(t,r,function(t){var o=e("#"+c).html();Mustache.parse(o),e(".resultbox").html(""),"publications"==c?e.each(t,function(t,i){var a=Mustache.render(o,i);e(".resultbox").append(a)}):"critics_review"==c?(delete t.total_results,e.each(t,function(t,i){console.log(i.title);var a=Mustache.render(o,i);e(".resultbox").append(a)})):e.each(t.books,function(t,i){var a=Mustache.render(o,i);e(".resultbox").append(a)}),e(".loader").fadeOut(500),i(),r.q="",r.slug="",a("resultbox","200",160),TweenMax.staggerFrom(e(".resultbox > .column"),2,{opacity:0,y:100,delay:0,ease:Back.easeInOut},.2)})}function i(){e(".criticclick").click(function(){return r.q=e(this).data("title"),t("http://idreambooks.com/api/books/reviews.json","critics_review"),!1})}function a(t,i,a){t=t.replace("link",""),e("html,body").animate({scrollTop:e("."+t).offset().top-a},i)}var r={key:"c26025ef50b4f78f3bb96605dfb01b8c6a0d7d84",q:"",slug:""};TweenMax.staggerFrom(e(".sidecontainer, .filterer > li, .filterergenre > li"),2,{opacity:0,y:20,ease:Power4.easeInOut},.1),t("http://idreambooks.com/api/publications/recent_recos.json","publications"),e(".filterer li").click(function(){e(".filterer li").removeClass("active"),e(this).addClass("active");var i=e(this).data("cat"),a=e(this).data("url");t(a,i)}),e(".filterergenre li").click(function(){e(".filterergenre li").removeClass("active"),e(this).addClass("active");var i="publications";r.slug=e(this).text();var a="http://idreambooks.com/api/publications/recent_recos.json";t(a,i)}),e(".searchicon").click(function(){e(this).parent().submit()}),e(".searchform").submit(function(){return r.q=e(this).find(".searchtextarea").val(),t("http://idreambooks.com/api/publications/recent_recos.json","publications"),!1})})}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsImRvY3VtZW50IiwidW5kZWZpbmVkIiwiZ2V0RGF0YSIsInVybCIsInRlbXBsYXRlaWQiLCJzaG93IiwiZ2V0SlNPTiIsImRhdGEiLCJyZXN1bHQiLCJ0ZW1wbGF0ZSIsImh0bWwiLCJNdXN0YWNoZSIsInBhcnNlIiwiZWFjaCIsImkiLCJmaWVsZCIsInJlbmRlcmVkIiwicmVuZGVyIiwiYXBwZW5kIiwidG90YWxfcmVzdWx0cyIsImNvbnNvbGUiLCJsb2ciLCJ0aXRsZSIsImJvb2tzIiwiZmFkZU91dCIsImNyaXRpY2NsaWNrIiwicSIsInNsdWciLCJnb1RvQnlTY3JvbGwiLCJUd2Vlbk1heCIsInN0YWdnZXJGcm9tIiwib3BhY2l0eSIsInkiLCJkZWxheSIsImVhc2UiLCJCYWNrIiwiZWFzZUluT3V0IiwiY2xpY2siLCJ0aGlzIiwiaWQiLCJkdXIiLCJvZmZzZXQiLCJyZXBsYWNlIiwiYW5pbWF0ZSIsInNjcm9sbFRvcCIsInRvcCIsImtleSIsIlBvd2VyNCIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJ0ZXh0IiwicGFyZW50Iiwic3VibWl0IiwiZmluZCIsInZhbCIsImpRdWVyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Q0FBQSxTQUFBQSxFQUFBQyxFQUFBQyxFQUFBQyxHQUVBLFlBRUFILEdBQUEsV0FTQSxRQUFBSSxHQUFBQyxFQUFBQyxHQUNBTixFQUFBLFdBQUFPLE9BQ0FQLEVBQUFRLFFBQUFILEVBQUFJLEVBQUEsU0FBQUMsR0FDQSxHQUFBQyxHQUFBWCxFQUFBLElBQUFNLEdBQUFNLE1BQ0FDLFVBQUFDLE1BQUFILEdBQ0FYLEVBQUEsY0FBQVksS0FBQSxJQUVBLGdCQUFBTixFQUNBTixFQUFBZSxLQUFBTCxFQUFBLFNBQUFNLEVBQUFDLEdBRUEsR0FBQUMsR0FBQUwsU0FBQU0sT0FBQVIsRUFBQU0sRUFDQWpCLEdBQUEsY0FBQW9CLE9BQUFGLEtBRUEsa0JBQUFaLFNBQ0FJLEdBQUFXLGNBQ0FyQixFQUFBZSxLQUFBTCxFQUFBLFNBQUFNLEVBQUFDLEdBQ0FLLFFBQUFDLElBQUFOLEVBQUFPLE1BQ0EsSUFBQU4sR0FBQUwsU0FBQU0sT0FBQVIsRUFBQU0sRUFDQWpCLEdBQUEsY0FBQW9CLE9BQUFGLE1BR0FsQixFQUFBZSxLQUFBTCxFQUFBZSxNQUFBLFNBQUFULEVBQUFDLEdBQ0EsR0FBQUMsR0FBQUwsU0FBQU0sT0FBQVIsRUFBQU0sRUFDQWpCLEdBQUEsY0FBQW9CLE9BQUFGLEtBSUFsQixFQUFBLFdBQUEwQixRQUFBLEtBRUFDLElBQ0FsQixFQUFBbUIsRUFBQSxHQUNBbkIsRUFBQW9CLEtBQUEsR0FFQUMsRUFBQSxZQUFBLE1BQUEsS0FFQUMsU0FBQUMsWUFBQWhDLEVBQUEsd0JBQUEsR0FBQWlDLFFBQUEsRUFBQUMsRUFBQSxJQUFBQyxNQUFBLEVBQUFDLEtBQUFDLEtBQUFDLFdBQUEsTUFnQ0EsUUFBQVgsS0FDQTNCLEVBQUEsZ0JBQUF1QyxNQUFBLFdBR0EsTUFGQTlCLEdBQUFtQixFQUFBNUIsRUFBQXdDLE1BQUEvQixLQUFBLFNBQ0FMLEVBQUEsZ0RBQUEsbUJBQ0EsSUFnQkEsUUFBQTBCLEdBQUFXLEVBQUFDLEVBQUFDLEdBRUFGLEVBQUFBLEVBQUFHLFFBQUEsT0FBQSxJQUVBNUMsRUFBQSxhQUFBNkMsU0FDQUMsVUFBQTlDLEVBQUEsSUFBQXlDLEdBQUFFLFNBQUFJLElBQUFKLEdBQ0FELEdBcEdBLEdBQUFqQyxJQUNBdUMsSUFBQSwyQ0FDQXBCLEVBQUEsR0FDQUMsS0FBQSxHQTJDQUUsVUFBQUMsWUFBQWhDLEVBQUEsdURBQUEsR0FBQWlDLFFBQUEsRUFBQUMsRUFBQSxHQUFBRSxLQUFBYSxPQUFBWCxXQUFBLElBQ0FsQyxFQUFBLDREQUFBLGdCQUdBSixFQUFBLGdCQUFBdUMsTUFBQSxXQUNBdkMsRUFBQSxnQkFBQWtELFlBQUEsVUFDQWxELEVBQUF3QyxNQUFBVyxTQUFBLFNBRUEsSUFBQXhDLEdBQUFYLEVBQUF3QyxNQUFBL0IsS0FBQSxPQUNBSixFQUFBTCxFQUFBd0MsTUFBQS9CLEtBQUEsTUFFQUwsR0FBQUMsRUFBQU0sS0FLQVgsRUFBQSxxQkFBQXVDLE1BQUEsV0FDQXZDLEVBQUEscUJBQUFrRCxZQUFBLFVBQ0FsRCxFQUFBd0MsTUFBQVcsU0FBQSxTQUVBLElBQUF4QyxHQUFBLGNBQ0FGLEdBQUFvQixLQUFBN0IsRUFBQXdDLE1BQUFZLE1BQ0EsSUFBQS9DLEdBQUEsMkRBRUFELEdBQUFDLEVBQUFNLEtBWUFYLEVBQUEsZUFBQXVDLE1BQUEsV0FDQXZDLEVBQUF3QyxNQUFBYSxTQUFBQyxXQUlBdEQsRUFBQSxlQUFBc0QsT0FBQSxXQUdBLE1BRkE3QyxHQUFBbUIsRUFBQTVCLEVBQUF3QyxNQUFBZSxLQUFBLG1CQUFBQyxNQUNBcEQsRUFBQSw0REFBQSxpQkFDQSxPQWdCQXFELE9BQUF4RCxPQUFBQyIsImZpbGUiOiJzY3JpcHRzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgICQoZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIEFQSSBEYXRhIG9iamVjdFxuICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgIGtleTogXCJjMjYwMjVlZjUwYjRmNzhmM2JiOTY2MDVkZmIwMWI4YzZhMGQ3ZDg0XCIsXG4gICAgICAgICAgICBxOiBcIlwiLFxuICAgICAgICAgICAgc2x1ZzogXCJcIlxuICAgICAgICB9O1xuXG4gICAgICAgIC8vQVBJIGNhbGwgYW5kIHRlbXBsYXRpbmcgdXNpbmcgTXVzdGFjaGUgdGVtcGxhdGluZyBlbmdpbmUgYW5kIGpxdWVyeVxuICAgICAgICBmdW5jdGlvbiBnZXREYXRhKHVybCwgdGVtcGxhdGVpZCkge1xuICAgICAgICAgICAgJCgnLmxvYWRlcicpLnNob3coKTtcbiAgICAgICAgICAgICQuZ2V0SlNPTih1cmwsIGRhdGEsIGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9ICQoJyMnICsgdGVtcGxhdGVpZCkuaHRtbCgpO1xuICAgICAgICAgICAgICAgIE11c3RhY2hlLnBhcnNlKHRlbXBsYXRlKTsgLy8gb3B0aW9uYWwsIHNwZWVkcyB1cCBmdXR1cmUgdXNlc1xuICAgICAgICAgICAgICAgICQoJy5yZXN1bHRib3gnKS5odG1sKCcnKTtcblxuICAgICAgICAgICAgICAgIGlmICh0ZW1wbGF0ZWlkID09ICdwdWJsaWNhdGlvbnMnKSB7XG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChyZXN1bHQsIGZ1bmN0aW9uKGksIGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGZpZWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZW5kZXJlZCA9IE11c3RhY2hlLnJlbmRlcih0ZW1wbGF0ZSwgZmllbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLnJlc3VsdGJveCcpLmFwcGVuZChyZW5kZXJlZCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGVtcGxhdGVpZCA9PSAnY3JpdGljc19yZXZpZXcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXN1bHQudG90YWxfcmVzdWx0cztcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHJlc3VsdCwgZnVuY3Rpb24oaSwgZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZpZWxkLnRpdGxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZW5kZXJlZCA9IE11c3RhY2hlLnJlbmRlcih0ZW1wbGF0ZSwgZmllbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLnJlc3VsdGJveCcpLmFwcGVuZChyZW5kZXJlZCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChyZXN1bHQuYm9va3MsIGZ1bmN0aW9uKGksIGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVuZGVyZWQgPSBNdXN0YWNoZS5yZW5kZXIodGVtcGxhdGUsIGZpZWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5yZXN1bHRib3gnKS5hcHBlbmQocmVuZGVyZWQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkKCcubG9hZGVyJykuZmFkZU91dCg1MDApO1xuXG4gICAgICAgICAgICAgICAgY3JpdGljY2xpY2soKTtcbiAgICAgICAgICAgICAgICBkYXRhLnEgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGRhdGEuc2x1ZyA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICBnb1RvQnlTY3JvbGwoJ3Jlc3VsdGJveCcsICcyMDAnLCAxNjApO1xuXG4gICAgICAgICAgICAgICAgVHdlZW5NYXguc3RhZ2dlckZyb20oJCgnLnJlc3VsdGJveCA+IC5jb2x1bW4nKSwgMiwgeyBvcGFjaXR5OiAwLCB5OiAxMDAsIGRlbGF5OiAwLCBlYXNlOiBCYWNrLmVhc2VJbk91dCB9LCAwLjIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBUd2Vlbk1heC5zdGFnZ2VyRnJvbSgkKCcuc2lkZWNvbnRhaW5lciwgLmZpbHRlcmVyID4gbGksIC5maWx0ZXJlcmdlbnJlID4gbGknKSwgMiwgeyBvcGFjaXR5OiAwLCB5OiAyMCwgZWFzZTogUG93ZXI0LmVhc2VJbk91dCB9LCAwLjEpO1xuICAgICAgICBnZXREYXRhKCdodHRwOi8vaWRyZWFtYm9va3MuY29tL2FwaS9wdWJsaWNhdGlvbnMvcmVjZW50X3JlY29zLmpzb24nLCAncHVibGljYXRpb25zJyk7XG5cbiAgICAgICAgLy9zaWRlIHBhbmVsIGZpbHRlcmVyLlxuICAgICAgICAkKCcuZmlsdGVyZXIgbGknKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQoJy5maWx0ZXJlciBsaScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuXG4gICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSAkKHRoaXMpLmRhdGEoJ2NhdCcpO1xuICAgICAgICAgICAgdmFyIHVybCA9ICQodGhpcykuZGF0YSgndXJsJyk7XG5cbiAgICAgICAgICAgIGdldERhdGEodXJsLCB0ZW1wbGF0ZSk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgLy9maWx0ZXIgYnkgZ2VucmVcbiAgICAgICAgJCgnLmZpbHRlcmVyZ2VucmUgbGknKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQoJy5maWx0ZXJlcmdlbnJlIGxpJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnYWN0aXZlJyk7XG5cbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9ICdwdWJsaWNhdGlvbnMnO1xuICAgICAgICAgICAgZGF0YS5zbHVnID0gJCh0aGlzKS50ZXh0KCk7XG4gICAgICAgICAgICB2YXIgdXJsID0gJ2h0dHA6Ly9pZHJlYW1ib29rcy5jb20vYXBpL3B1YmxpY2F0aW9ucy9yZWNlbnRfcmVjb3MuanNvbic7XG5cbiAgICAgICAgICAgIGdldERhdGEodXJsLCB0ZW1wbGF0ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vQ3JpdGlzbXMgZGF0YSByZXF1ZXN0IGJhc2VkIG9uIGJvb2sgdGl0bGVcbiAgICAgICAgZnVuY3Rpb24gY3JpdGljY2xpY2soKSB7XG4gICAgICAgICAgICAkKCcuY3JpdGljY2xpY2snKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBkYXRhLnEgPSAkKHRoaXMpLmRhdGEoJ3RpdGxlJyk7XG4gICAgICAgICAgICAgICAgZ2V0RGF0YSgnaHR0cDovL2lkcmVhbWJvb2tzLmNvbS9hcGkvYm9va3MvcmV2aWV3cy5qc29uJywgJ2NyaXRpY3NfcmV2aWV3Jyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAkKCcuc2VhcmNoaWNvbicpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5zdWJtaXQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy93aGVuIHNlYXJjaCBpcyB0cmlnZ2VyZWRcbiAgICAgICAgJCgnLnNlYXJjaGZvcm0nKS5zdWJtaXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkYXRhLnEgPSAkKHRoaXMpLmZpbmQoJy5zZWFyY2h0ZXh0YXJlYScpLnZhbCgpO1xuICAgICAgICAgICAgZ2V0RGF0YSgnaHR0cDovL2lkcmVhbWJvb2tzLmNvbS9hcGkvcHVibGljYXRpb25zL3JlY2VudF9yZWNvcy5qc29uJywgJ3B1YmxpY2F0aW9ucycpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICAvL3Njcm9sbCB0byByZXN1bHQgZGl2XG4gICAgICAgIGZ1bmN0aW9uIGdvVG9CeVNjcm9sbChpZCwgZHVyLCBvZmZzZXQpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSBcImxpbmtcIiBmcm9tIHRoZSBJRFxuICAgICAgICAgICAgaWQgPSBpZC5yZXBsYWNlKFwibGlua1wiLCBcIlwiKTtcbiAgICAgICAgICAgIC8vIFNjcm9sbFxuICAgICAgICAgICAgJCgnaHRtbCxib2R5JykuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgc2Nyb2xsVG9wOiAkKFwiLlwiICsgaWQpLm9mZnNldCgpLnRvcCAtIG9mZnNldFxuICAgICAgICAgICAgfSwgZHVyKTtcbiAgICAgICAgfVxuXG5cbiAgICB9KTtcblxufSkoalF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTsiXX0=
